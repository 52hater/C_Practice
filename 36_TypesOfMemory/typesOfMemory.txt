64비트 시스템에서 메모리 주소의 길이는 64비트임(8바이트)

컴퓨터는 하드웨어 소프트웨어
소프트웨어는 시스템 소프트웨어, 응용프로그램
유저모드-어플리케이션프로세스
운영체제-커널
우리가 C로 작성하고 있는건 프로세스인데
프로세스는 실행이나 작업의 단위
실질적으로 윈도우 환경에서 실행의단위를 논할때는
스레드가 있음
우리는 지금 프로세스 하나에 스레드 하나인 프로그램을 만들고있음
프로세스가 집이라면 스레드는 거기 사는 사람
멀티스레드가 이루어지면 생각할게 많아짐
>멀티스레드 프로그래밍
>이거는 강의에서는 안다룸

윈도우에선 어떤 프로그램 실행되면 야 니가 쓸수있는 메모리공간을 내가 줄게 > 32비트 어플리케이션이라면 운영체제가 프로그램한테 
야 니가 가상메모리공간을 쓸 수 있는데 4기가를 쓸 수 있어.
>> 헬로월드라는 프로그램이다? 4기가는 무슨 1메가도 안씀
근데 그래도 일단 4기가 쓸 수 있다고 해줘>실제로 있지도 않는 메모리가 있는 것처럼 소프트웨어적으로 존재함
>>>그게 가상메모리 체계임.

가상메모리의 내부적 특징은 주기억장치(램), 보조기억장치(파일) 그 두개를 하나의 논리메모리로 추상화된 형태로 되어있다

그래서  os공부를 c언어와 같이 공부를 하는게 좋아

메모리종류
스택(자동변수, 보통1메가)
힙(동적 할당 메모리)
실행코드영역 -text section(코드섹션) - 실행코드 기계어
            -data section
              *Read only(문자열 상수) (헬로월드같은거)
              *Read/Write(정적메모리) > 정적영역

이 모든게 다 가상메모리(VMS)영역임
가상메모리는 소프트웨어적인거라 생각하면 됨
전부다 가상메모리 스페이스 안에 있음 아 그리고 텍스트섹션은 (실행코드기계어)
가상메모리를 아주아주 큰 배열이라 생각하자 개념적으로


스택 - 지역변수이자 자동변수 - 생겼다 사라졌다 반복(스택구조로 관리되는 메모리영역이기 때문)

힙 - 동적할당메모리 - 우리가 뭐 예제같은거 만들고 했는데 예제속에서 변수를 선언해봤자 사실상 메모리공간 크기를 생각하면 별로 안됨 
    근데 만약에 100메가짜리 큰 공간이 필요해? > 근데 필요할 수도 있고 필요하지 않을수도 있어 
    > 예를들어 프로그램개발은 다 끝냈는데 사용자가 어떤 명령을 내리면 100메가가 필요하고 안내리면 100메가가 필요없어
    그러면 여기서 고민을 해야지 > 우리가 만든 프로그램이 실행되자마자 일단 100메가를 확보해서 소모된것처럼 만들어서
    프로그램이 작동되어야 할까 아니면 일단 기다려야할까 
    >> 사용자가 요구할때, 그러니까 바로 런타임(프로그램이 작동할때)에 OS한테 100메가만 주셈 
    > 동적으로 할당하는 것. > 동적이라는 말이 나오면 런타임이라는 키워드를 머리에 떠올려야함!!!

정적메모리영역(스태틱) - 대표적으로 전역변수(프로그램이 실행될때 이미 잡혀있고 프로그램이 끝날때까지 유지)


# 메모리 관리 함수
    - malloc(), calloc() / free() >> 동적으로 관리할 때 엠얼록함수, 프리함수가 제일 기본
                                    OS한테 malloc함수로 메모리주셈 하면
                                    OS가 메모리 줌
                                    예를들어 A1 > 할당된 어떤 구간을 집어가지고 거기에서
                                    공간을 OS가 결정을해서 공간을 지정한다음에, 그 시작지점이 되는 주소를 알려줌,
                                    다 썼어요 하고 반납할때 free()함수
                                    운영체제는 메모리를 가져간 것을 알지만 개발자에게 나중에 이 공간이 필요없어지는 시점을 요구함
                                    메모리를 가져간 프로세스가 메모리를 반납할때까지는 강제회수하지 않음.
                                    그런 부분들을 c언어에서는 메모리운영에 대한 높은 자유를 개발자에게 줌
                                    그러니까 높은 책임도 요구함. 높은자유 = 높은책임
    - realloc()
    - memcpy(), strcpy()
    - memcmp(), strcmp()
    - sprint()

    // 메모리 얼로케이션 > 엠얼록 멤얼록 말록 등등이라고 함 보통 엠얼록


가상메모리라는 공간은 우리 눈에 보이지 않아서 모든 것을 이론으로 따질 수 밖에 없는데
가상메모리라는 공간은 마치 엑셀의 셀화면과 똑같다고 생각해도 괜찮아. 그냥 그렇게 이해해

앞으로 메모리디버깅 > 매우중요, 실습으로 많이 할 것. 디버깅을 실습하는걸 많이 연습해.